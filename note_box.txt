# cpp
* 引用对象的释放，要看引用的是谁，要看引用的源头，当前引用对象离开作用域可能并不会真正释放对象，或者说去执行对象的析构函数，因为引用仅仅是某个对象的别名，因此它的生命周期是和被引用的源头绑定在一起的。
* 拷贝构造函数的调用发生在对象拷贝的时候，可以理解为对象拷贝的瞬间，this就拷贝给了另一个对象，其实就是为另一个对象开辟了一块一样的内存空间。
* 构造顺序：基类构造->成员构造->构造函数体，多继承时，基类的初始化顺序从左到右执行。
* 析构顺序：析构函数体->成员析构->基类析构，析构和构造的顺序正好相反。
* lvalue. 左值，可以出现在赋值表达式左边的值，用于指定一个对象或者函数。例如指向函数或对象的指针的内容.
* xvalue, expring value. 将亡值，也是和某个对象相关，但是其生命周期马上进入尾声了。
* gvalue, generalized lvalue. 泛左值，lvalue or xvalue。
* rvalue. 右值，可以出现在赋值表达式的右边，可能是一个xvalue，一个临时对象，或者还未和对象关联的值。
* prvalue, pure rvalue. 纯右值不是xvalue的rvalue。例如非引用形式的函数返回值，字面量。
* static_cast 使用类型转换时优先考虑，有10种场景见cppreference文档。
* dynamic_cast 安全地转换继承体系中的类型(包括void*)，up or down or sideways转换指针或引用。
* const_cast 
* reinterpreter_cast
